{"entries":[{"timestamp":1730671786621,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"@#4G.p1Ma}ACV@%Z,!/N\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"9cHV}|h=15EgN}IdrbV~\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  Constantes de configuración\nlet MAX_TEMP = 50\nlet MAX_ACCEL = 1023\nlet MAX_LIGHT = 255\nlet MAX_MAG_FIELD = 1023\nlet MAX_ROTATION = 360\nlet MAX_SOUND = 255\n//  Variables de estado\nlet current_value = 0\nlet x = 2\nlet y = 2\nlet mode = 0\n//  Modo inicial\nlet modes = 7\n//  Número total de modos\nfunction update_sensor_readings() {\n    /** Actualiza la lectura actual basada en el modo seleccionado. */\n    \n    if (mode == 0) {\n        current_value = input.temperature()\n    } else if (mode == 1) {\n        //  Lectura de temperatura\n        current_value = input.acceleration(Dimension.X)\n    } else if (mode == 2) {\n        //  Lectura de aceleración en X\n        current_value = input.lightLevel()\n    } else if (mode == 3) {\n        //  Lectura de luz\n        current_value = input.magneticForce(Dimension.X)\n    } else if (mode == 4) {\n        //  Lectura del campo magnético en X\n        current_value = input.rotation(Rotation.Pitch)\n    } else if (mode == 5) {\n        //  Lectura de rotación\n        current_value = input.soundLevel()\n    }\n    \n}\n\n//  Lectura de sonido\nfunction draw_graph() {\n    /** Dibuja un gráfico de barras basado en el valor actual y el modo. */\n    if (mode < 6) {\n        //  Modo gráfico\n        led.plotBarGraph(current_value, [MAX_TEMP, MAX_ACCEL, MAX_LIGHT, MAX_MAG_FIELD, MAX_ROTATION, MAX_SOUND][mode])\n    } else {\n        //  Modo de gota\n        led.plot(x, y)\n    }\n    \n}\n\nfunction move_drop() {\n    /** Mueve la gota según la inclinación de la micro:bit. */\n    \n    let accel_x = input.acceleration(Dimension.X)\n    let accel_y = input.acceleration(Dimension.Y)\n    if (accel_x < -150 && x > 0) {\n        //  Mueve a la izquierda\n        x -= 1\n    } else if (accel_x > 150 && x < 4) {\n        //  Mueve a la derecha\n        x += 1\n    }\n    \n    if (accel_y < -150 && y > 0) {\n        //  Mueve hacia arriba\n        y -= 1\n    } else if (accel_y > 150 && y < 4) {\n        //  Mueve hacia abajo\n        y += 1\n    }\n    \n}\n\n//  Mueve la gota según la inclinación\n//  Control de botones\n//  Asignación de funciones a los botones\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n    \n    mode = (mode + 1) % modes\n    //  Cambia al siguiente modo\n    basic.clearScreen()\n})\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n    \n    mode = 6\n    //  Cambia directamente al modo de gota\n    basic.clearScreen()\n})\n//  Iniciar el bucle principal\nbasic.forever(function on_forever() {\n    /** Función principal que se ejecuta en bucle. */\n    basic.clearScreen()\n    update_sensor_readings()\n    draw_graph()\n    if (mode == 6) {\n        //  Solo en el modo de gota\n        draw_graph()\n        //  Dibuja la gota\n        basic.pause(50)\n        //  Pausa para dar efecto visual\n        led.unplot(x, y)\n        //  Apaga el LED anterior\n        move_drop()\n    }\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":2848,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"reto e"],[1,"ç"],[0,"\",\n    \""]],"start1":13,"start2":13,"length1":16,"length2":17},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":218,"start2":218,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// aquí va el archivo \"tests\"; esto no se compilará cuando este paquete se utilice como una extensión.\n"},{"type":"added","filename":"main.py","value":"from microbit import *\n\n# Constantes de configuración\nMAX_TEMP = 50\nMAX_ACCEL = 1023\nMAX_LIGHT = 255\nMAX_MAG_FIELD = 1023\nMAX_ROTATION = 360\nMAX_SOUND = 255\n\n# Variables de estado\ncurrent_value = 0\nx = 2\ny = 2\nmode = 0  # Modo inicial\nmodes = 7  # Número total de modos\n\ndef update_sensor_readings():\n    \"\"\"Actualiza la lectura actual basada en el modo seleccionado.\"\"\"\n    global current_value\n    if mode == 0:\n        current_value = input.temperature()  # Lectura de temperatura\n    elif mode == 1:\n        current_value = input.acceleration(Dimension.X)  # Lectura de aceleración en X\n    elif mode == 2:\n        current_value = input.light_level()  # Lectura de luz\n    elif mode == 3:\n        current_value = input.magnetic_force(Dimension.X)  # Lectura del campo magnético en X\n    elif mode == 4:\n        current_value = input.rotation(Rotation.PITCH)  # Lectura de rotación\n    elif mode == 5:\n        current_value = input.sound_level()  # Lectura de sonido\n\ndef draw_graph():\n    \"\"\"Dibuja un gráfico de barras basado en el valor actual y el modo.\"\"\"\n    if mode < 6:  # Modo gráfico\n        led.plot_bar_graph(current_value, [MAX_TEMP, MAX_ACCEL, MAX_LIGHT, MAX_MAG_FIELD, MAX_ROTATION, MAX_SOUND][mode])\n    else:  # Modo de gota\n        led.plot(x, y)\n\ndef move_drop():\n    \"\"\"Mueve la gota según la inclinación de la micro:bit.\"\"\"\n    global x, y\n    accel_x = input.acceleration(Dimension.X)\n    accel_y = input.acceleration(Dimension.Y)\n\n    if accel_x < -150 and x > 0:  # Mueve a la izquierda\n        x -= 1\n    elif accel_x > 150 and x < 4:  # Mueve a la derecha\n        x += 1\n\n    if accel_y < -150 and y > 0:  # Mueve hacia arriba\n        y -= 1\n    elif accel_y > 150 and y < 4:  # Mueve hacia abajo\n        y += 1\n\ndef on_forever():\n    \"\"\"Función principal que se ejecuta en bucle.\"\"\"\n    basic.clear_screen()\n    update_sensor_readings()\n    draw_graph()\n    \n    if mode == 6:  # Solo en el modo de gota\n        draw_graph()  # Dibuja la gota\n        basic.pause(50)  # Pausa para dar efecto visual\n        led.unplot(x, y)  # Apaga el LED anterior\n        move_drop()  # Mueve la gota según la inclinación\n\n# Control de botones\ndef on_button_pressed_a():\n    global mode\n    mode = (mode + 1) % modes  # Cambia al siguiente modo\n    basic.clear_screen()\n\ndef on_button_pressed_b():\n    global mode\n    mode = 6  # Cambia directamente al modo de gota\n    basic.clear_screen()\n\n# Asignación de funciones a los botones\ninput.on_button_pressed(Button.A, on_button_pressed_a)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\n# Iniciar el bucle principal\nbasic.forever(on_forever)\n"}]}],"snapshots":[{"timestamp":1730671786620,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"reto eç\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1730671915873}